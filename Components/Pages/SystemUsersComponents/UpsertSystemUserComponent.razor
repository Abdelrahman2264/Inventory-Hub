@page "/SystemUsers/Create"
@page "/SystemUsers/Update/{id:int}"
@inject NavigationManager _navigationManager
@inject IJSRuntime JS
@inject ILogRepository _ILog
@inject IAppUserRepository _IAppUser
@inject ILogService _LogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using InventorySystem.ViewModels
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
<PageTitle>System Users</PageTitle>

@if (isProcessing)
{
    <div class=" position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center ">
        <img src="/images/Loading.gif" alt="Loading..." />
    </div>
}
else
{
    <div class="card shadow border-2 m-4 ">
        <div class="card-header bg-dark bg-gradient ml-1 pt-3 border-2">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(User.AppUserId == 0 ? "Add User" : "Update User")</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">

            <EditForm Model="User" FormName="UserUpsertForm" OnValidSubmit="UpsertSystemUser" class="flex-form">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="form-group mb-2">
                    <div class="form-floating">
                        <InputText @bind-Value="User.LoginName" class="form-control border-1 border-black" id="LoginName" />
                        <label for="LoginName">Login Name</label>
                        <ValidationMessage For="@(()=>User.LoginName)" />
                    </div>
                </div>
                <div class="form-group mb-2">
                    <div class="form-floating">
                        <InputText @bind-Value="User.Password" class="form-control border-1 border-black" id="Password" />
                        <label for="Password">Password</label>
                        <ValidationMessage For="@(()=>User.Password)" />
                    </div>
                </div>
                <div class="form-group mb-2">
                    <div class="form-floating">
                        <InputText @bind-Value="User.Email" class="form-control border-1 border-black" id="Email" />
                        <label for="Email">Email</label>
                        <ValidationMessage For="@(()=>User.Email)" />
                    </div>
                </div>
                <div class="form-group mb-2">

                    <div class="form-floating">
                        <InputSelect @bind-Value="User.Role" class="form-control border-1 border-black" id="Role">
                            <option value="">Select a Type</option>
                            <option value="User">User</option>
                            <option value="Admin">Admin</option>
                        </InputSelect>
                        <label for="Role">Role</label>
                        <ValidationMessage For="@(() => User.Role)" />
                    </div>

                </div>
                <!-- Submit and Back Buttons -->

                <div class="row mt-3 d-flex justify-content-end">
                    <div class="col-auto">

                        <button type="submit" class="btn btn-success form-control" disabled="@isProcessing">@(User.AppUserId == 0 ? "Add New User" : "Update This User")</button>
                    </div>

                    <div class="col-auto">
                        <a href="SystemUsers" class="btn btn-secondary">Back To List</a>
                    </div>


                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    [SupplyParameterFromForm]
    private new AppUsers User { get; set; } = new AppUsers();
    [Parameter]
    public int Id { get; set; } = 0;
    private bool isProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await loadAsset();
        isProcessing = false;
        StateHasChanged();
    }


    private async Task loadAsset()
    {
        if (Id > 0)
        {
            User = await _IAppUser.GetAppUserAsync(Id);
        }
    }
    private async Task UpsertSystemUser()
    {

        isProcessing = true;
        bool flag = false;
        if (User.AppUserId == 0)
        {
            await _IAppUser.AddNewAppUserAsync(User);
            JS?.ToastrSuccess("System User  Created Successfully");
            flag = true;
        }
        else
        {
            await _IAppUser.EditAppUserAsync(User);
            JS?.ToastrSuccess("System User  Updated Successfully");
            flag = true;
        }
        isProcessing = false;
        _navigationManager.NavigateTo("SystemUsers");
        if (!flag)
        {
            JS?.ToastrError("Something Get Wrong Please Try Again !!");
        }

    }
}


