@page "/SystemUsers"
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogRepository _ILog
@inject IAppUserRepository _IAppUser
@inject ILogService _LogService
@using InventorySystem.ViewModels
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
<PageTitle>System Users</PageTitle>

<BsModal OnModalConfirmation="ConfirmDelete_Click"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Delete"
         Title="Are you sure you want to in Active this User ?">
</BsModal>
@if (isProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading" />
    </div>
}
else
{
    <div class="card shadow border-2 mt-4">
        <div class="card-header bg-dark bg-gradient ml-0 py-3 border-2">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">System Users And Admins</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/SystemUsers/Create" class="btn btn-success btn-lg">
                        <i class="bi bi-person-plus"></i>  Add New User
                    </a>
                </div>
            </div>
        </div>
        <table class="table table-hover text-center">
            <thead class="table-info">
                <tr>
                    <th>User ID</th>
                    <th>Login Name</th>
                    <th>Role</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {
                    <tr>
                        <td>@user.AppUserId</td>
                        <td>@user.LoginName</td>
                        <td>@user.Role</td>
                        <td>@user.Email</td>

                        <td>
                            <a href="@($"SystemUsers/Update/{user.AppUserId}")" class="btn btn-primary btn-sm">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => HandleDelete(user.AppUserId)">
                                <i class="bi bi-trash3"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {
    private bool isProcessing { get; set; } = false;
    private IEnumerable<AppUsers> Users { get; set; } = new List<AppUsers>();
    private int DeletedId { get; set; }
    private Task<AuthenticationState> Authroize { get; set; }


    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await LoadTypes();
        isProcessing = false;
        Authroize = AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task LoadTypes()
    {
        Users = await _IAppUser.GetAllAppUsersAsync();
        Users = Users.Where(u => u.Role != "Admin");
    }

    public async Task HandleDelete(int id)
    {
        DeletedId = id;
        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DeletedId != 0)
        {
            var result = await _IAppUser.InActiveAppUser(DeletedId);
            if (result)
            {
                JS?.ToastrSuccess("This System User Was Inactived Successfully");
            }
            else
            {
                JS?.ToastrError("Error Encountered while deleting");
            }

            await LoadTypes();
        }
        DeletedId = 0;
        isProcessing = false;
    }
}
