@page "/LapTops"
@inject ILapTopRepository _ILapTop
@inject IAssetRepository _IAsset
@inject IJSRuntime JS
@inject IAssignmentRepository _IAssign
@inject ILogService _ILogService
@using InventorySystem.ViewModels
@using LapTop = InventorySystem.ViewModels.Laptop
@using ClosedXML.Excel
@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>Laptops</PageTitle>

<BsModal OnModalConfirmation="ConfirmDelete_Click"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Delete"
         Title="Are you sure you want to InActive this Device ?">
</BsModal>
@if (isProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading" />
    </div>
}
else
{
    <div class="card shadow border-2 mt-4">
        <div class="card-header bg-dark bg-gradient ml-0 py-3 border-2">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">LapTops</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <AuthorizeView Roles="Admin">
                        <a href="/LapTops/Create" class="btn btn-success btn-lg">
                            <i class="bi bi-plus-square"></i> Add New LapTop
                        </a>
                    </AuthorizeView>
               
                    <div>
                        <button class="btn btn-secondary mx-1" @onclick="ApplyFilters">
                            <i class="bi bi-funnel"></i> Filter
                        </button>
                        <button class="btn btn-warning" @onclick="ResetFilters">
                            <i class="bi bi-arrow-counterclockwise"></i> Reset
                        </button>
                        <button class="btn btn-success mx-1" @onclick="ExportToExcel">
                            <i class="bi bi-file-earmark-excel"></i> Export to Excel
                        </button>
                    </div>
                </div>

            </div>
        </div>
        <table class="table table-hover text-center">
            <thead class="table-info">
                <tr>
                    <th>Brand  <br> <input @bind="FilterBrand" class="form-control form-control-sm" /></th>
                    <th>Model Version <br> <input @bind="FilterModelVersion" class="form-control form-control-sm" /></th>
                    <th>Serial Number  <br> <input @bind="FilterSerialNumber" class="form-control form-control-sm" /></th>
                    <th>RAM  <br> <input @bind="FilterRam" class="form-control form-control-sm" /></th>
                    <th>CPU  <br> <input @bind="FilterCpu" class="form-control form-control-sm" /></th>
                    <th>GPU  <br> <input @bind="FilterGpu" class="form-control form-control-sm" /></th>
                    <th>Hard Disk  <br> <input @bind="FilterHardDisk" class="form-control form-control-sm" /></th>

                    <th>Device Name  <br> <input @bind="FilterDeviceName" class="form-control form-control-sm" /></th>

                    <th>Status  <br> <input @bind="FilterStatus" class="form-control form-control-sm" /></th>
                    <th>Description  <br> <input @bind="FilterDescription" class="form-control form-control-sm" /></th>
                    <th style="min-width:300px">Actions</th>



                </tr>
            </thead>
            <tbody>
                @foreach (var asset in FilteredAssets)
                {
                    <tr>
                        <td>@asset.Asset.Brand</td>
                        <td>@asset.Asset.ModelVersion</td>
                        <td>@asset.Asset.SerialNumber</td>
                        <td>@asset.Ram</td>
                        <td>@asset.Cpu</td>
                        <td>@asset.Gpu</td>
                        <td>@asset.HardDisk</td>
                        <td>@asset.DeviceName</td>

                        <td>
                            <span class="badge" style="background-color: @GetStatusColor(asset.Asset.Status); color: white;">
                                @asset.Asset.Status
                            </span>
                        </td>
                        <td>@asset.Asset.Description</td>
                        <td>
                            <a href="@($"LapTops/Update/{asset.AssetId}/{asset.Asset.TypeId}")" class="btn btn-primary btn-sm">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <a href="@($"LapTops/Details/{asset.AssetId}/{asset.Asset.TypeId}")" class="btn btn-success btn-sm">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => HandleDelete(asset.AssetId)">
                                <i class="bi bi-trash3"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
@code {
    private bool isProcessing { get; set; } = false;
    private IEnumerable<LapTop> lapTops { get; set; } = new List<LapTop>();
    private int DeletedId { get; set; }
    private IEnumerable<LapTop> FilteredAssets { get; set; } = new List<LapTop>(); // Filtered Data
    private IEnumerable<Assignment> assignments { get; set; } = new List<Assignment>(); // Filtered Data
    private string FilterSerialNumber { get; set; } = "";
    private string FilterRam { get; set; } = "";
    private string FilterCpu { get; set; } = "";
    private string FilterGpu { get; set; } = "";
    private string FilterBrand { get; set; } = "";
    private string FilterModelVersion { get; set; } = "";
    private string FilterStatus { get; set; } = "";
    private string FilterHardDisk { get; set; } = "";
    private string FilterDeviceName { get; set; } = "";
    private string FilterDescription { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await LoadTypes();
        assignments = await _IAssign.GetAllAssignments();
        isProcessing = false;
    }

    private async Task LoadTypes()
    {
        lapTops = await _ILapTop.GetAllLapTopsAsync();
        FilteredAssets = lapTops;
    }
    public async Task HandleDelete(int id)
    {
        DeletedId = id;
        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeletedId != 0)
        {
            var Tempdesk = await _IAsset.GetAssetAsync(DeletedId);
            var result = await _IAsset.DeleteAssetAsync(DeletedId);
            if (result)
            {
                await _ILogService.CreateLogAsync(Tempdesk.AssetId, "In Active a LapTop In The System", "Delete", Tempdesk.Type.Name);
                JS?.ToastrSuccess("Asset LapTop Device Was Inactived Successfully");
            }
            else
                JS?.ToastrError("Error Encountered while deleting");

            await LoadTypes();
        }

        DeletedId = 0;
        isProcessing = false;
    }
    private string GetStatusColor(string StatusName)
    {
        return StatusName switch
        {
            "Assigned" => "#007bff",  // Blue
            "Stock" => "#28a745", // Green
            "EndLife" => "#ffc107", // Yellow
            _ => "#6c757d"          // Default (Gray)
        };

    }


    private void ApplyFilters()
    {
        FilteredAssets = lapTops.Where(a =>
            (string.IsNullOrEmpty(FilterSerialNumber) || a.Asset.SerialNumber.Contains(FilterSerialNumber, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterRam) || a.Ram.Contains(FilterRam, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterCpu) || a.Cpu.Contains(FilterCpu, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterGpu) || a.Gpu.Contains(FilterGpu, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterBrand) || a.Asset.Brand.Contains(FilterBrand, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterModelVersion) || a.Asset.ModelVersion.Contains(FilterModelVersion, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterStatus) || a.Asset.Status.Contains(FilterStatus, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterHardDisk) || a.HardDisk.Contains(FilterHardDisk, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterDeviceName) || a.DeviceName.Contains(FilterDeviceName, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(FilterDescription) || a.Asset.Description.Contains(FilterDescription, StringComparison.OrdinalIgnoreCase))

        ).ToList();
    }
    private void ResetFilters()

    {
        FilterSerialNumber = "";

        FilterRam = "";
        FilterCpu = "";
        FilterGpu = "";
        FilterBrand = "";
        FilterModelVersion = "";
        FilterStatus = "";
        FilterHardDisk = "";
        FilterDeviceName = "";
        FilterDescription = "";
        ApplyFilters();

    }


    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("DeskTops");

        // Add headers
        worksheet.Cell(1, 1).Value = "Serial Number";
        worksheet.Cell(1, 2).Value = "Type";
        worksheet.Cell(1, 3).Value = "Purchase Date";
        worksheet.Cell(1, 4).Value = "Expiry Date";
        worksheet.Cell(1, 5).Value = "Brand";
        worksheet.Cell(1, 6).Value = "Model";
        worksheet.Cell(1, 7).Value = "Status";
        worksheet.Cell(1, 8).Value = "Device Name";
        worksheet.Cell(1, 9).Value = "RAM";
        worksheet.Cell(1, 10).Value = "CPU";
        worksheet.Cell(1, 11).Value = "GPU";
        worksheet.Cell(1, 12).Value = "Hard Disk";
        worksheet.Cell(1, 13).Value = "WI-Fi MAC";
        worksheet.Cell(1, 14).Value = "Ethernet MAC";
        worksheet.Cell(1, 15).Value = "OS";
        worksheet.Cell(1, 16).Value = "Screen Size";
        worksheet.Cell(1, 17).Value = "Label";
        worksheet.Cell(1, 18).Value = "Description";

        // Add data
        int row = 2;
        foreach (var asset in FilteredAssets)
        {
            worksheet.Cell(row, 1).Value = asset.Asset.SerialNumber;
            worksheet.Cell(row, 2).Value = asset.Asset.Type.Name;
            worksheet.Cell(row, 3).Value = asset.Asset.PurchaseDate.ToShortDateString();
            worksheet.Cell(row, 4).Value = asset.Asset.ExpiryDate?.ToShortDateString() ?? "No Expiry Data";
            worksheet.Cell(row, 5).Value = asset.Asset.Brand;
            worksheet.Cell(row, 6).Value = asset.Asset.ModelVersion;
            worksheet.Cell(row, 7).Value = asset.Asset.Status;
            worksheet.Cell(row, 8).Value =  asset.DeviceName;
            worksheet.Cell(row, 9).Value = asset.Ram;
            worksheet.Cell(row, 10).Value = asset.Cpu;
            worksheet.Cell(row, 11).Value = asset.Gpu;
            worksheet.Cell(row, 12).Value = asset.HardDisk;
            worksheet.Cell(row, 13).Value = asset.MacWifi;
            worksheet.Cell(row, 14).Value = asset.MacEthernet;
            worksheet.Cell(row, 15).Value = asset.OS;
            worksheet.Cell(row, 16).Value = asset.ScreenSize;
            worksheet.Cell(row, 17).Value = asset.Label;
            worksheet.Cell(row, 18).Value = asset.Asset.Description;
            row++;
        }

        // Create a new workbook and worksheet

        // Set the header row style
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Apply borders to the entire worksheet

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        // Set the font and alignment for all cells
        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Auto-adjust column width and row height
        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();


        // Save the workbook

        // Save the file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"LapTops_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        // Trigger download in Blazor
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

}

